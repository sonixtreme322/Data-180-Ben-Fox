#library(tidyverse)
library(tm)
#library(tidyverse)
library(tm)
news<-read.csv("news.csv",header=T)
library(NLP)
# Custom options for knitting
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
error = FALSE,
fig.align = "center",
cache = FALSE
)
#library(tidyverse)
library(NLP)
library(tm)
news<-read.csv("news.csv",header=T)
posWords <- scan("positive-words.txt", character(0), sep = "\n")  # 2006 items
negWords <- scan("negative-words.txt", character(0), sep = "\n")  # 4783 items
head(posWords,15)
head(negWords,15)
#
?overview
#Scan the head of news to see what variables there are and how they're labelled
head(news)
#Get the largest and smallest year in that data set
most_recent <- max(news$year)
most_recent
most_old <- min(news$year)
most_old
#Subtract oldest from youngest and get the full range of years.
year_range <- most_recent - most_old
#Return year_range, which is 20 years
year_range
#set headline_text as equal to charVector
charVector <- c(headline_text)
#set headline_text as equal to charVector
charVector <- c(news$headline_text)
charVector
#Return the first 6 entries
head(charVector)
?VectorSource
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
error = FALSE,
fig.align = "center",
cache = FALSE
# Custom options for knitting
knitr::opts_chunk$set(
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
error = FALSE,
fig.align = "center",
cache = FALSE
)
#library(tidyverse)
library(NLP)
library(tm)
news<-read.csv("news.csv",header=T)
posWords <- scan("positive-words.txt", character(0), sep = "\n")  # 2006 items
negWords <- scan("negative-words.txt", character(0), sep = "\n")  # 4783 items
head(posWords,15)
head(negWords,15)
#Scan the head of news to see what variables there are and how they're labelled
head(news)
#Get the largest and smallest year in that data set
most_recent <- max(news$year)
most_old <- min(news$year)
#Subtract oldest from youngest and get the full range of years.
year_range <- most_recent - most_old
#Return year_range, which is 18 years
year_range
#set headline_text as equal to charVector
charVector <- c(news$headline_text)
#Return the first 6 entries
head(charVector)
#Creates vector source object wordVector
wordVector <- VectorSource(charVector)
wordVector
charVector
wordVector
charVector
wordVector
?Corpus
?Corpus()
Corpus(wordVector)
wordVector
#Creates corpus object wordCorpus
wordCorpus <- Corpus(wordVector)
wordCorpus
?tm_map
# Custom options for knitting
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
error = FALSE,
fig.align = "center",
cache = FALSE
)
#library(tidyverse)
library(NLP)
library(tm)
news<-read.csv("news.csv",header=T)
posWords <- scan("positive-words.txt", character(0), sep = "\n")  # 2006 items
negWords <- scan("negative-words.txt", character(0), sep = "\n")  # 4783 items
head(posWords,15)
head(negWords,15)
#Scan the head of news to see what variables there are and how they're labelled
head(news)
#Get the largest and smallest year in that data set
most_recent <- max(news$year)
most_old <- min(news$year)
#Subtract oldest from youngest and get the full range of years.
year_range <- most_recent - most_old
#Return year_range, which is 18 years
year_range
#set headline_text as equal to charVector
charVector <- c(news$headline_text)
#Return the first 6 entries
head(charVector)
#Creates vector source object wordVector
wordVector <- VectorSource(charVector)
#Creates corpus object wordCorpus
wordCorpus <- Corpus(wordVector)
#Make all text lowercase
wordCorpus <- tm_map(wordCorpus, tolower(wordCorpus))
wordCorpus
head(wordCorpus)
#Remove all punctuation from the text
wordCorpus <- tm_map(wordCorpus, removePunctuation)
wordCorpus
#Remove all numbers from the corpus
wordCorpus <- tm_map(wordCorpus, removeNumbers)
wordCorpus
#Remove all stopwords
wordCorpus <- tm_map(wordCorpus, removeWords, stopwords("en"))
wordCorpus
#Creating a term document matrix called tdm using the described function
tdm <- TermDocumentMatrix(wordVector)
tdm
#Creating a term document matrix called tdm using the described function
tdm <- TermDocumentMatrix(charVector)
#Printing the newly created object
tdm
#Creating a term document matrix called tdm using the described function
tdm <- TermDocumentMatrix(wordVector)
#Printing the newly created object
tdm
#Printing the newly created object
tdm
#It's a matrix that returns the frequency of terms within a given corpus.
?TermDocumentMatrix
#Creating a term document matrix called tdm using the described function
tdm <- TermDocumentMatrix(charVector)
#Printing the newly created object
tdm
# Custom options for knitting
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
error = FALSE,
fig.align = "center",
cache = FALSE
)
#library(tidyverse)
library(NLP)
library(tm)
news<-read.csv("news.csv",header=T)
posWords <- scan("positive-words.txt", character(0), sep = "\n")  # 2006 items
negWords <- scan("negative-words.txt", character(0), sep = "\n")  # 4783 items
head(posWords,15)
head(negWords,15)
#Scan the head of news to see what variables there are and how they're labelled
head(news)
#Get the largest and smallest year in that data set
most_recent <- max(news$year)
most_old <- min(news$year)
#Subtract oldest from youngest and get the full range of years.
year_range <- most_recent - most_old
#Return year_range, which is 18 years
year_range
#set headline_text as equal to charVector
charVector <- c(news$headline_text)
#Return the first 6 entries
head(charVector)
#Creates vector source object wordVector
wordVector <- VectorSource(charVector)
#Creates corpus object wordCorpus
wordCorpus <- Corpus(wordVector)
#Make all text lowercase
wordCorpus <- tm_map(wordCorpus, tolower(wordCorpus))
#Remove all punctuation from the corpus
wordCorpus <- tm_map(wordCorpus, removePunctuation)
#Remove all numbers from the corpus
wordCorpus <- tm_map(wordCorpus, removeNumbers)
#Remove all stopwords
wordCorpus <- tm_map(wordCorpus, removeWords, stopwords("en"))
#Creating a term document matrix called tdm using the described function
tdm <- TermDocumentMatrix(charVector)
#Printing the newly created object
tdm
#Convert tdm into matrix m
m <- matrix(tdm)
m
#Convert tdm into matrix m
?matrix
#Convert tdm into matrix m
m <- as.matrix(tdm)
#Converting frequency of
m
#Convert tdm into matrix m
m <- matrix(tdm)
#Converting frequency of
m
# Custom options for knitting
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
error = FALSE,
fig.align = "center",
cache = FALSE
)
#library(tidyverse)
library(NLP)
library(tm)
news<-read.csv("news.csv",header=T)
posWords <- scan("positive-words.txt", character(0), sep = "\n")  # 2006 items
negWords <- scan("negative-words.txt", character(0), sep = "\n")  # 4783 items
head(posWords,15)
head(negWords,15)
#Scan the head of news to see what variables there are and how they're labelled
head(news)
#Get the largest and smallest year in that data set
most_recent <- max(news$year)
most_old <- min(news$year)
#Subtract oldest from youngest and get the full range of years.
year_range <- most_recent - most_old
#Return year_range, which is 18 years
year_range
#set headline_text as equal to charVector
charVector <- c(news$headline_text)
#Return the first 6 entries
head(charVector)
#Creates vector source object wordVector
wordVector <- VectorSource(charVector)
#Creates corpus object wordCorpus
wordCorpus <- Corpus(wordVector)
#Make all text lowercase
wordCorpus <- tm_map(wordCorpus, tolower(wordCorpus))
#Remove all punctuation from the corpus
wordCorpus <- tm_map(wordCorpus, removePunctuation)
#Make all text lowercase
wordCorpus <- tm_map(wordCorpus, tolower(wordCorpus))
#Remove all numbers from the corpus
wordCorpus <- tm_map(wordCorpus, removeNumbers)
#Remove all stopwords
wordCorpus <- tm_map(wordCorpus, removeWords, stopwords("en"))
#Creating a term document matrix called tdm using the described function
tdm <- TermDocumentMatrix(charVector)
#Printing the newly created object
tdm
#Convert tdm into matrix m
m <- matrix(tdm)
