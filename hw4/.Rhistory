![Mario Kart](https://camo.githubusercontent.com/248411ba0d52bb38f1dccd3f74ed9d5a37f56aa95dbfb92518768b020959576c/68747470733a2f2f692e696e73696465722e636f6d2f356337643361313932363238393833663866373137623166)
library(dplyr)
records <- read.csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-05-25/records.csv')
head(records)
summary(records)
?select
length %>% filter(records.data, record_duration > 365)
filter(record_duration > 365)
filter(records$record_duration > 365)
year_longer <- filter(records$record_duration > 365)
year_longer <- filter(records.data, player, record_duration > 365)
year_longer <- filter(data = records, player, record_duration > 365)
year_longer <- filter(records, record_duration > 365)
head(year_longer)
#Prints the length of new data frame
length(year_longer)
?filter
longest_break_time <- records %>%
select(player, track, date, record_duration) %>%
filter(max(record_duration))
longest_break_time <- records %>%
select(player, track, date, record_duration) %>%
filter(cummax(record_duration))
longest_break_time <- records %>%
select(player, track, date, record_duration)
longest_break_time
cool_guy <- records %>%
select(player, track, date, record_duration) %>%
filter(longest_break_time = max(record_duration))
cool_guy <- records %>%
select(player, track, date, record_duration) %>%
filter(longest_break_time = max(record_duration))
cool_guy <- records %>%
select(player, track, date, record_duration) %>%
filter(longest_break_time == max(record_duration))
cool_guy <- records %>%
select(player, track, date, record_duration) %>%
filter(longest_break_time <- max(record_duration))
cool_guy <- records %>%
select(player, track, date, record_duration) %>%
filter(max(record_duration))
cool_guy <- records %>%
select(player, track, date, record_duration) %>%
filter(record_duration == max(record_duration))
cool_guy
mean_records <- group_by(records, track) %>%
summarize(records, av_time = mean(time, na.rm = TRUE))
mean_records
mean_records
mean_records <- group_by(records, track) %>%
summarize(records, av_time = mean(time, na.rm = TRUE)) %>%
select(records, track, av_time)
mean_records <- select(records, track, av_time) %>%
group_by(records, track) %>%
summarize(records, av_time = mean(time, na.rm = TRUE)) %>%
mean_records
mean_records <- select(records, track, av_time) %>%
group_by(records, track) %>%
summarize(records, av_time = mean(time, na.rm = TRUE)) %>%
mean_records
mean_records <- select(records, track, av_time) %>%
group_by(records, track) %>%
summarize(records, av_time = mean(time, na.rm = TRUE))
mean_records <- group_by(records, track) %>%
summarize(records, av_time = mean(time, na.rm = TRUE))
mean_records <- group_by(records, track) %>%
summarize(records, av_time = mean(time, na.rm = TRUE)) %>%
select(records, track, av_time)
mean_records
mean_records <- group_by(records, track) %>%
summarize(records, av_time = mean(time, na.rm = TRUE))
mean_records
mean_records <- group_by(records, track) %>%
reframe(records, av_time = mean(time, na.rm = TRUE))
mean_records
mean_records <- group_by(records, track) %>%
summarise(records, av_time = mean(time, na.rm = TRUE))
mean_records
mean_records <- group_by(records, track) %>%
summarise(mean_records, av_time = mean(time, na.rm = TRUE))
summarize()
summarize(mean_records, av_time = mean(time, na.rm = TRUE))
mean_records <- group_by(records, track)
summarize(mean_records, av_time = mean(time, na.rm = TRUE))
mean_records
mean_records <- group_by(records, track)
summarize(mean_records, av_time = mean(time, na.rm = TRUE))
track_group
#Made a slightly new data set grouping records by track so that summarize can do its thing properly
track_group <- group_by(records, track)
#Summarized the data set to find the average time for each track
summarize(track_group, av_time = mean(time, na.rm = TRUE))
#Summarized the data set to find the average time for each track
mean_records <- summarize(track_group, av_time = mean(time, na.rm = TRUE))
mean_records
#Found the smallest one using a simple filter function
filter(mean_records, av_time == min(av_time))
?mutate
#Added a new variable mutate
records <- mutate(records, year = substr(date, 1, 4))
#Checking to see if it was added
records
year_group <- group_by(records, year)
summarise(year_group, av_time = mean(time))
year_group <- group_by(records, year, track)
summarise(year_group, av_time = mean(time))
year_group <- group_by(records, year)
summarise(year_group, av_time = mean(time))
#Actually grab ggplot
library(ggplot2)
#Summarized the data and put it into a variable for question 7
av_time_year <- summarise(year_group, av_time = mean(time))
#Printed variable
av_time_year
#Make the bar graph
ggplot(data = av_time_year, aes(year, av_time)) + geom_bar(stat = "identity")
#Make the bar graph
ggplot(data = av_time_year, aes(year, av_time)) + geom_bar(stat = "identity", colour = "red")
#Make the bar graph
ggplot(data = av_time_year, aes(year, av_time)) + geom_bar(stat = "identity", fill = "red")
#Make the bar graph
ggplot(data = av_time_year, aes(year, av_time)) + geom_bar(stat = "identity", fill = c("red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red", "orange"))
#Make the bar graph
ggplot(data = av_time_year, aes(year, av_time)) + geom_bar(stat = "identity", fill = c("red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red"))
#Make the bar graph
ggplot(data = av_time_year, aes(year, av_time)) + geom_bar(stat = "identity", fill = c("red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red", color = "black"))
#Make the bar graph
ggplot(data = av_time_year, aes(year, av_time)) + geom_bar(stat = "identity", fill = c("red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red"), color = "black")
#Make the bar graph, and set it to a variable so question 8 doesn't take up too much space
records_over_time = ggplot(data = av_time_year, aes(year, av_time)) + geom_bar(stat = "identity", fill = c("red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red"), color = "black")
#Print the variable
records_over_time
#Make the bar graph
ggplot(data = av_time_year, aes(year, av_time)) + geom_bar(stat = "identity", fill = c("red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red"), color = "black")
library(dplyr)
records <- read.csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-05-25/records.csv')
#Added a new variable "year" through mutate
records <- mutate(records, year = substr(date, 1, 4))
#Actually grab ggplot
library(ggplot2)
system_group <- group_by(records, system_played)
year_and_system <- group_by(system_group, year)
av_time_year <- summarise(year_and_system, av_time = mean(time))
ggplot(data = av_time_year, aes(year, av_time, fill = system_played)) + geom_bar()
year_and_system
av_time_year
year_and_system
system_group <- group_by(records, system_played)
system_group
system_group <- group_by(records, system_played)
system_group
year_and_system <- summarise(system_group, year, av_time <- mean(time))
year_and_system <- summarise(system_group, av_time <- mean(time))
year_and_system
#Actually grab ggplot
library(ggplot2)
#Make the bar graph
ggplot(data = av_time_year, aes(year, av_time)) + geom_bar(stat = "identity", fill = c("red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red"), color = "black")
library(dplyr)
records <- read.csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-05-25/records.csv')
#Actually grab ggplot
library(ggplot2)
#Grouped by year
year_group <- group_by(records, year)
#Added a new variable "year" through mutate
records <- mutate(records, year = substr(date, 1, 4))
#Checking to see if it was added
records
#Grouped by year
year_group <- group_by(records, year)
#Summarized the data and put it into a variable for question 7
av_time_year <- summarise(year_group, av_time = mean(time))
#Printed variable
av_time_year
#Make the bar graph
ggplot(data = av_time_year, aes(year, av_time)) + geom_bar(stat = "identity", fill = c("red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red"), color = "black")
#Make the bar graph
ggplot(data = av_time_year, aes(year, av_time)) + geom_bar(stat = "identity", fill = c("red", "orange", "yellow","green", "blue", "purple"), color = "black")
#Make the bar graph
ggplot(data = av_time_year, aes(year, av_time)) + geom_bar(stat = "identity", fill = c("red", "orange", "yellow","green", "blue", "purple","red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red"), color = "black")
records %>% group_by(type == "Single Lap") %>% summarize(time) %>% ggplot(., aes(type)) %>% geom_histogram()
records %>% group_by(type == "Single Lap") %>% summarize(time) %>% ggplot(., aes(type)) + geom_histogram()
records %>% group_by(type == "Single Lap") %>% summarize(time)
records %>% filter(type == "Single Lap") %>% summarize(time)
records %>%
group_by(type == "Single Lap") %>%
summarize(time) %>%
ggplot(., aes(year, fill = (type == "Single Lap"))) + geom_histogram(position = "dodge")
#Added a new variable "year" through mutate
records <- mutate(records, year = substr(date, 1, 4))
#Checking to see if it was added
records
records %>%
group_by(type == "Single Lap") %>%
summarize(time) %>%
ggplot(., aes(year, fill = (type == "Single Lap"))) + geom_histogram(position = "dodge")
records %>%
group_by(type == "Single Lap") %>%
summarize(time) %>%
ggplot(records, aes(year, fill = (type == "Single Lap"))) + geom_histogram(position = "dodge")
records %>%
group_by(type == "Single Lap") %>%
summarize(time) %>%
ggplot(., aes(year, fill = (type == "Single Lap"))) + geom_histogram(position = "dodge")
records %>%
group_by(type == "Single Lap") %>%
summarize(time) %>%
ggplot(aes(records$year, fill = (type == "Single Lap"))) + geom_histogram(position = "dodge")
records %>%
group_by(type == "Single Lap") %>%
summarize(time) %>%
ggplot(aes(records$year, fill = (records$type == "Single Lap"))) + geom_histogram(position = "dodge")
records %>%
group_by(type == "Single Lap") %>%
summarize(time) %>%
ggplot(., aes(time, fill = (type == "Single Lap"))) + geom_histogram(position = "dodge")
records %>%
group_by(type == "Single Lap") %>%
summarize(time) %>%
ggplot(., aes(time, fill = (records$type == "Single Lap"))) + geom_histogram(position = "dodge")
records %>%
group_by(type == "Single Lap") %>%
summarize(time) %>%
ggplot(., aes(time, fill = (records$type == "Single Lap"))) + geom_histogram()
records %>%
group_by(type == "Single Lap") %>%
summarize(time) %>%
ggplot() + geom_histogram(aes(time, records$type))
records %>%
filter(type == "Single Lap") %>%
summarize(time) %>%
ggplot() + geom_histogram(aes(time, records$type == "Single Lap"), alpha = 0.5) +
geom_histogram(aes(time, records$type == "Three Lap"), alpha = 0.5)
records %>%
filter(type == "Single Lap") %>%
summarize(time) %>%
ggplot() + geom_histogram(aes(time, fill = records$type == "Single Lap"), alpha = 0.5) +
geom_histogram(aes(time, fill = records$type == "Three Lap"), alpha = 0.5)
records %>%
filter(type == "Single Lap") %>%
summarize(time) %>%
ggplot() + geom_histogram(aes(time, fill = (records$type == "Single Lap"), alpha = 0.5)) +
geom_histogram(aes(time, fill = (records$type == "Three Lap"), alpha = 0.5))
#Filter out the single lap records
single_lap_records <- filter(records$type == "Single Lap")
#Filter out the single lap records
single_lap_records <- filter(records$type == "Single Lap")
#Filter out the single lap records
single_lap_records <- filter(records, type == "Single Lap")
#Filter out the triple lap records
triple_lap_records <- filter(records, type == "Three Lap")
#Create a histogram to see the two
ggplot() + geom_histogram(aes(x = single_lap_records$time), fill = "blue", alpha = 0.5)
#Create a histogram to see the two
ggplot() + geom_histogram(aes(x = single_lap_records$time), fill = "blue", alpha = 0.5) +
geom_histogram(aes(x = triple_lap_records$time), fill = "orange", alpha = 0.5)
records <- mutate(records, time_per <- if_else(type == "Triple Lap", type / 3))
records <- mutate(records, time_per <- if_else(type == "Triple Lap", time / 3))
records <- mutate(records, time_per <- if_else(type == "Triple Lap", time / 3, time = time))
records
records <- mutate(records, time_per <- if_else(type == "Three Lap", time / 3, time))
records
records <- mutate(records, time_per = if_else(type == "Three Lap", time / 3, time))
records
#Filter out the triple lap records so that the histogram knows what to target
triple_lap_records <- filter(records, type == "Three Lap")
#Create a histogram to see the two
ggplot() + geom_histogram(aes(x = single_lap_records$time), fill = "blue", alpha = 0.5) +
geom_histogram(aes(x = triple_lap_records$time_per), fill = "orange", alpha = 0.5)
#Modify triple_lap_records to get correct variable
triple_lap_records <- filter(triple_lap_records, shortcut == "No")
#Do the histogram again
ggplot() + geom_histogram(aes(x = single_lap_records$time), fill = "blue", alpha = 0.5) +
geom_histogram(aes(x = triple_lap_records$time_per), fill = "orange", alpha = 0.5)
#Checking to see if it was added
head(records)
#Printed variable
av_time_year
