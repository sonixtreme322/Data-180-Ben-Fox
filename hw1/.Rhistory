people <- c("Alice", "Bob", "Charlie", "Denise", "Erin", "Frank", "Gisele", "Harry")
preference <- c("Twitter", "Facebook", "Twitter", "Instagram", "Facebook", "Twitter", "Twitter", "Instagram")
#Storing the data in a data frame object
my_df <- data.frame(people, preference)
my_df
my_df
total_users <- length(people)
total_users
twitter <- subset(my_df, subset = "Twitter")
twitter = subset(my_df, subset = preference == "Twitter")
twitter
#Find where that information is stored
gisele = my_df["Gisele",]
#Print that data
gisele
#Find where that information is stored
gisele = my_df[7,]
#Print that data
gisele
#Find where that information is stored
gisele = my_df[7,2]
#Print that data
gisele
#Create that vector
my_vec <- c(1:10)
#Print that vector to test that it worked
my_vec
#Assign 99 to the second value in my_vec
my_vec[2] <- 99
#Print my_vec to make sure the change took
my_vec
my_function <- function(vector){
#For-loop to sort through the vector
for x in my_vec{
my_function <- function(vector){
#For-loop to sort through the vector
for i in my_vec{
my_function
my_function <- function(vector){
#For-loop to sort through the vector
for i in my_vec{
my_function <- function(vector){
#For-loop to sort through the vector
for (i in my_vec) {
#If-else ladder to print the correct statement
if (x > 5) {
print("This element is greater than 5!")
} else {
print("This element is NOT greater than 5!")
}
}
}
my_function
#Test function
my_function(my_vec)
#Test function
my_function(my_vec)
#Make a function
my_function <- function(vector){
#For-loop to sort through the vector
for (i in my_vec) {
#If-else ladder to print the correct statement
if (i > 5) {
print("This element is greater than 5!")
} else {
print("This element is NOT greater than 5!")
}
}
}
#Test function
my_function(my_vec)
get_fibonacci <- function(x){
#Assign the first two values of the sequence
p <- 0
q <- 1
#For loop to find the rest of the fibonacci sequence
for (i in 1:x){
#Calculate the next number in the sequence
next_num <- p + q
#Reassign numbers accordingly
p <- q
q <- next_num
}
print(next_num)
#Print out the wanted number
get_fibonacci(19)
#Print out the wanted number
get_fibonacci(19)
get_fibbonacci(19)
#Print out the wanted number
get_fibonacci(19)
#Create the function
get_fibonacci <- function(x){
#Assign the first two values of the sequence
p <- 0
q <- 1
#For loop to find the rest of the fibonacci sequence
for (i in 1:x){
#Calculate the next number in the sequence
next_num <- p + q
#Reassign numbers accordingly
p <- q
q <- next_num
}
print(next_num)
}
#Print out the wanted number
get_fibonacci(19)
print(next_num)
#Create the function
get_fibonacci <- function(x){
#Assign the first two values of the sequence
p <- 0
q <- 1
#For loop to find the rest of the fibonacci sequence
for (i in 1:x){
#Calculate the next number in the sequence
next_num <- p + q
#Reassign numbers accordingly
p <- q
q <- next_num
}
print(q)
}
#Print out the wanted number
get_fibonacci(19)
get_fibonacci(19)
#Print out the wanted number
get_fibonacci(19)
#Print out the wanted number
get_fibonacci(19)
#Print out the wanted number
get_fibonacci(19)
get_fibonacci <- function(x){
#Assign the first two values of the sequence
p <- 0
q <- 1
#For loop to find the rest of the fibonacci sequence
for (i in 1:x){
#Calculate the next number in the sequence
next_num <- p + q
#Reassign numbers accordingly
p <- q
q <- next_num
print(next_num)
}
print(q)
#Print out the wanted number
get_fibonacci(19)
#Find  the wanted number
fibonacki <- get_fibonacci(19)
#Print said number
fibonacki
#Create the function
get_fibonacci <- function(x){
#Assign the first two values of the sequence
p <- 0
q <- 1
#For loop to find the rest of the fibonacci sequence
for (i in 1:x){
#Calculate the next number in the sequence
next_num <- p + q
#Reassign numbers accordingly
p <- q
q <- next_num
}
}
#Find  the wanted number
fibonacki <- get_fibonacci(19)
#Print said number
fibonacki
#Find  the wanted number
get_fibonacci(19)
get_fibonacci <- function(x){
#Assign the first two values of the sequence
p <- 0
q <- 1
#For loop to find the rest of the fibonacci sequence
for (i in 1:x){
#Calculate the next number in the sequence
next_num <- p + q
#Reassign numbers accordingly
p <- q
q <- next_num
}
return(q)
}
#Find  the wanted number
get_fibonacci(19)
get_fibonacci <- function(x){
#Assign the first two values of the sequence
p <- 0
q <- 1
#For loop to find the rest of the fibonacci sequence
for (i in 1:x){
#Calculate the next number in the sequence
next_num <- p + q
#Reassign numbers accordingly
p <- q
q <- next_num
}
return(p)
}
#Find  the wanted number
get_fibonacci(19)
