print("Big boy")
install.packages("randomForest") #This allows me to access the functions and data within this script
install.packages("MASS")
library("MASS")
head(Cars93)
?Cars93
ls(Cars93) #Tells you the column names of all the variables in the data
Cars93$Type #Find the categorizations of each column
#We can use the table function to find various things by writing table(dataset$variable)
table(Cars93$AirBags)
table(Cars93$Manufacturer)
#We'll use round plus division in tables to find relative frequency distribution
round(table(Cars93$AirBags)/nrow(Cars93),3)
#colors
colors()
#This list can be sliced by saying I want [first:last]
colors()[1:40]
palette()
palette()
palette()
#We can change the palette like so
palette(c("red2","orchid1","yellow4","tomato2"))
palette()
head(Cars93) #Shows the first six rows of the given data set
install.packages("randomForest") #This allows me to access the functions and data within this script
install.packages("MASS")
library("MASS")
head(Cars93) #Shows the first six rows of the given data set
library("MASS")
#Making a stem plot
Cars93$Weight
stem(Cars93$Weight)
#Dot plot of MPG
Cars93$MPG.city
stripchart(Cars93$MPG.city,method="stack",pch=16, + cex.axis=1.2,cex.lab=1.2,xlab="Miles per Gallon")
stripchart(Cars93$MPG.city,method="stack",pch=16, cex.axis=1.2,cex.lab=1.2,xlab="Miles per Gallon")
stripchart(Cars93$MPG.city,method="stack",pch=3, cex.axis=1.2,cex.lab=1.2,xlab="Miles per Gallon")
stripchart(Cars93$MPG.city,method="stack",pch=18, cex.axis=1.2,cex.lab=1.2,xlab="Miles per Gallon")
stripchart(Cars93$MPG.city,method="stack",pch=1, cex.axis=1.2,cex.lab=1.2,xlab="Miles per Gallon")
stripchart(Cars93$MPG.city,method="stack",pch=16, cex.axis=1.0,cex.lab=1.2,xlab="Miles per Gallon")
stripchart(Cars93$MPG.city,method="stack",pch=16, cex.axis=1.2,cex.lab=1.2,xlab="Miles per Gallon")
stripchart(Cars93$MPG.city,method="stack",pch=16, cex.axis=2.0,cex.lab=1.2,xlab="Miles per Gallon")
stripchart(Cars93$MPG.city,method="stack",pch=16, cex.axis=1.2,cex.lab=2.0,xlab="Miles per Gallon")
#Histogram of Weight
Cars93$Weight
hist(Cars93$Weight, cex.lab=1.2, cex.axis=1.2, col="lightgray", breaks=seq(1000, 5000, 300), xlab="Weight of Cars")
hist(Cars93$Weight, cex.lab=1.2, cex.axis=1.2, col="lightgray", breaks=seq(1000, 5000, 500), xlab="Weight of Cars")
print("ha ha i too use words")
1+1
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
#install.packages("ggplot2") # only need to install once
library(ggplot2)
data(diamonds, package="ggplot2")
dim(diamonds)
head(diamonds)
dim(diamonds)
head(diamonds)
plot(diamonds$carat,diamonds$price) # x-variable first in this notation
# or
plot(price~carat, data=diamonds) # an alternative way: this is y against x
plot(diamonds$carat,diamonds$price) # x-variable first in this notation
plot(diamonds$carat,diamonds$price) # x-variable first in this notation
# or
plot(price~carat, data=diamonds) # an alternative way: this is y against x
install.packages("dplyr")
library(dplyr)
library(MASS)
detach("package:MASS", unload = TRUE)
library(MASS)
#The select function allows us to...
Cars93_Exl <- select(Cars93, Type, EngineSize, DriveTrain, MPG.city)
#The select function allows us to...
head(Cars93)
Cars93_Exl <- select(Cars93, Type, EngineSize, DriveTrain, MPG.city)
library(MASS)
detach("package:MASS", unload = TRUE)
detach("package:dplyr", unload = TRUE)
#install.packages("dplyr")
library(MASS)
library(dplyr)
Cars93_Exl <- select(Cars93, Type, EngineSize, DriveTrain, MPG.city)
Cars93_Exl
ls(Cars93)
plot(denisty(Cars93$Price))
plot(density(Cars93$Price))
plot(density(log(Cars93$Price)))
#Basic density plot and a logged version of it
plot(density(Cars93$Price)) #Looks like a skewed distribution
plot(density(log(Cars93$Price))) #Looks like a normal distribution
table(Cars93$Type)
Cars93_Exl2<-filter(Cars93, Type=="Small")
Cars93_Exl2
head(Cars93_Exl2)
Cars93_Ex3<-select(filter(Cars93, Type=="Small"), Model, EngineSize, Horsepower, MPG.highway)
head(Cars93_Ex3)
#Basic density plot and a logged version of it
plot(density(Cars93$Price)) #Looks like a skewed distribution
plot(density(log(Cars93$Price))) #Looks like a normal distribution
#Gives...
Cars93_Ex4<-select(filter(Cars93, Horsepower>150), Model, EngineSize, Horsepower, MPG.highway)
head(Cars93_Ex4)
#We have the %in% checks if a value is in a list of possible values
Cars93_Ex5<-select(filter(Cars93, Type %in% c("Sporty","Compact") & Horsepower>= 120),
Model, Type, EngineSize, MPG.city)
head(Cars93_Ex5)
#The pipe operator aka %>% can result in more reasable code when you have several operations that need to be nested. It's an alternative to nesting.
Cars93_Ex6<-Cars93 %>% filter(Type %in% c("Sporty", "Compact") & Horsepower >= 120) %>%
select(Model, Type, EngineSize)
head(Cars93_Ex6)
head(Cars93_Ex6)
library(ggplot2) # keep in mind you have to install ggplot2 first via install.packages() if it's not installed in your machine
library(MASS)
# install the packages below by uncommenting the lines. You need to do this only once.
#install.packages('ozmaps') # downloads the map needed
#install.packages('sf') # package used to analyze spatial data
library(ozmaps)
library(sf)
au_states <- ozmaps::ozmap_states # read in spatial dataframe object
ggplot(au_states) + geom_sf()
ggplot(au_states, aes(fill = NAME)) + geom_sf()
au_capitals <- tibble::tribble(
~city,           ~lat,     ~lon,
"Sydney",    -33.8688, 151.2093,
"Melbourne", -37.8136, 144.9631,
"Brisbane",  -27.4698, 153.0251,
"Adelaide",  -34.9285, 138.6007,
"Perth",     -31.9505, 115.8605,
"Hobart",    -42.8821, 147.3272,
"Canberra",  -35.2809, 149.1300,
"Darwin",    -12.4634, 130.8456,
)
ggplot(au_states, aes(fill = NAME)) + geom_sf()
ggplot(au_states, aes(fill = NAME)) + geom_sf() + geom_point(aes(au_capitals$lat, au_capitals$lon))
ggplot() + geom_sf(data = au_states, aes(fill = NAME)) + geom_point(aes(au_capitals$lat, au_capitals$lon))
ggplot() + geom_sf(data = au_states, aes(fill = NAME)) + geom_point(data = au_capitals, aes(lon, lat), col = "red", size = 2)
library(ggplot2) # keep in mind you have to install ggplot2 first via install.packages() if it's not installed in your machine
library(MASS)
# install the packages below by uncommenting the lines. You need to do this only once.
#install.packages('ozmaps') # downloads the map needed
#install.packages('sf') # package used to analyze spatial data
library(ozmaps)
library(sf)
au_states <- ozmaps::ozmap_states # read in spatial dataframe object
au_capitals <- tibble::tribble(
~city,           ~lat,     ~lon,
"Sydney",    -33.8688, 151.2093,
"Melbourne", -37.8136, 144.9631,
"Brisbane",  -27.4698, 153.0251,
"Adelaide",  -34.9285, 138.6007,
"Perth",     -31.9505, 115.8605,
"Hobart",    -42.8821, 147.3272,
"Canberra",  -35.2809, 149.1300,
"Darwin",    -12.4634, 130.8456,
)
ggplot() + geom_sf(data = au_states, aes(fill = NAME)) + geom_point(data = au_capitals, aes(lon, lat), col = "red", size = 2) + coord_sf(st_crs(1490))
ggplot() + geom_sf(data = au_states, aes(fill = NAME)) + geom_point(data = au_capitals, aes(lon, lat), col = "red", size = 2) + coord_sf(st_crs(14, 90))
ggplot() + geom_sf(data = au_states, aes(fill = NAME)) + geom_point(data = au_capitals, aes(lon, lat), col = "red", size = 2) + coord_sf(st_crs(4))
ggplot() + geom_sf(data = au_states, aes(fill = NAME)) + geom_point(data = au_capitals, aes(lon, lat), col = "red", size = 2) + coord_sf(st_crs(4000))
ggplot() + geom_sf(data = au_states, aes(fill = NAME)) + geom_point(data = au_capitals, aes(lon, lat), col = "red", size = 2) + coord_sf(st_crs(4326))
ggplot() + geom_sf(data = au_states, aes(fill = NAME)) + geom_point(data = au_capitals, aes(lon, lat), col = "red", size = 2) + coord_sf(st_crs(3112))
default_crs <- sf::st_crs(4326)
ggplot() + geom_sf(data = au_states, aes(fill = NAME)) + geom_point(data = au_capitals, aes(lon, lat), col = "red", size = 2) + coord_sf(default_crs)
ggplot() + geom_sf(data = au_states, aes(fill = NAME)) + geom_point(data = au_capitals, aes(lon, lat), col = "red", size = 2)
ggplot() + coord_sf(data = au_states, aes(fill = NAME)) + geom_point(data = au_capitals, aes(lon, lat), col = "red", size = 2)
ggplot() + geom_sf(data = au_states, aes(fill = NAME)) + geom_point(data = au_capitals, aes(lon, lat), col = "red", size = 2)
ggplot() + coordsf(st_crs(default_crs)) + geom_sf(data = au_states, aes(fill = NAME)) + geom_point(data = au_capitals, aes(lon, lat), col = "red", size = 2)
ggplot() + coord_sf(st_crs(default_crs)) + geom_sf(data = au_states, aes(fill = NAME)) + geom_point(data = au_capitals, aes(lon, lat), col = "red", size = 2)
ggplot() + geom_sf(data = au_states, aes(fill = NAME)) + geom_point(data = au_capitals, aes(lon, lat), col = "red", size = 2) + coord_sf(st_crs(default_crs))
ggplot() + geom_sf(data = au_states, aes(fill = NAME)) + coord_sf(st_crs(default_crs)) + geom_point(data = au_capitals, aes(lon, lat), col = "red", size = 2)
ggplot() + coord_sf(st_crs(default_crs)) + geom_sf(data = au_states, aes(fill = NAME)) + geom_point(data = au_capitals, aes(lon, lat), col = "red", size = 2)
ggplot() + coord_sf(st_crs(default_crs)) + geom_point(data = au_capitals, aes(lon, lat), col = "red", size = 2)
+ geom_sf(data = au_states, aes(fill = NAME))
ggplot() + coord_sf(st_crs(default_crs)) + geom_sf(data = au_states, aes(fill = NAME)) + geom_point(data = au_capitals, aes(lon, lat), col = "red", size = 2)
ggplot() + coord_sf(default_crs) + geom_sf(data = au_states, aes(fill = NAME)) + geom_point(data = au_capitals, aes(lon, lat), col = "red", size = 2)
ggplot() + coord_sf(default_crs) + geom_sf(data = au_states, aes(fill = NAME)) + geom_point(data = au_capitals, aes(lon, lat), col = "red", size = 2)
#install.packages('mapview') # interactive display
library(mapview)
install.packages('mapview') # interactive display
install.packages("mapview")
#install.packages('mapview') # interactive display
library(mapview)
records %>% (single_lap <- filter(., type == "Single Lap")) %>% ggplot(., aes(year, single_lap)) + geom_bar(stat = "identity")
records %>% (single_lap <- filter(., type == "Single Lap"))
records %>% filter(., type == "Single Lap"))
records %>% filter(., type == "Single Lap")
#Plugged in the dataset to the requested function.
summary(records)
records <- read.csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-05-25/records.csv')
library(dplyr)
#Plugged in the dataset to the requested function.
summary(records)
#Actually grab ggplot
library(ggplot2)
head(records)
#Makes two data sets to represent both single and three lap tracks
head(records)
#Makes two data sets to represent both single and three lap tracks
triple_lap <- filter(records, type == "Three Lap")
triple_lap
single_lap <- records - triple_lap
records
single_lap <- filter(records, type == "Single Lap")
single_lap
#Added a new variable "year" through mutate
records <- mutate(records, year = substr(date, 1, 4))
#Printed variable
av_time_year
#Grouped by year
year_group <- group_by(records, year)
#Summarized the data and put it into a variable for question 7
av_time_year <- summarise(year_group, av_time = mean(time))
#Printed variable
av_time_year
records %>% triple_lap <- filter(., type == "Three Lap") +
single_lap <- filter(., type == "Single Lap") %>%
ggplot(aes(year, av_time)) + geom_bar(., stat = "identity", fill = c("red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red"), color = "black") +
geom_histogram(single_lap) + geom_histogram(triple_lap)
records %>% triple_lap <- filter(records, type == "Three Lap") +
single_lap <- filter(records, type == "Single Lap") %>%
ggplot(aes(year, av_time)) + geom_bar(records, stat = "identity", fill = c("red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red", "orange", "yellow","green", "blue", "purple", "red"), color = "black") +
geom_histogram(single_lap) + geom_histogram(triple_lap)
records %>% triple_lap <- filter(records, type == "Three Lap") +
single_lap <- filter(records, type == "Single Lap") %>%
ggplot(aes(year, av_time)) + geom_bar(records, stat = "identity") +
geom_histogram(single_lap) + geom_histogram(triple_lap)
records %>% triple_lap <- filter(records, type == "Three Lap") +
single_lap <- filter(records, type == "Single Lap") %>%
ggplot(aes(year, av_time)) + geom_bar(records) +
geom_histogram(single_lap) + geom_histogram(triple_lap)
records %>% triple_lap <- filter(records, type == "Three Lap") +
single_lap <- filter(records, type == "Single Lap") %>%
ggplot(aes(year, av_time)) + geom_bar(data = records, stat = "Identity") +
geom_histogram(data = single_lap) + geom_histogram(data =triple_lap)
records %>% (triple_lap <- filter(records, type == "Three Lap")) +
(single_lap <- filter(records, type == "Single Lap")) %>%
ggplot(aes(year, av_time)) + geom_bar(data = records, stat = "Identity") +
geom_histogram(data = single_lap) + geom_histogram(data =triple_lap)
#Makes two data sets to represent both single and three lap tracks
single_lap <- filter(records, type == "Single Lap")
triple_lap <- filter(records, type == "Three Lap")
ggplot(aes(year, av_time)) + geom_bar(data = records, stat = "Identity") +
geom_histogram(data = single_lap) + geom_histogram(data =triple_lap)
ggplot() + geom_bar(data = records, aes(year, av_time), stat = "Identity") +
geom_histogram(data = single_lap, aes(year, av_time)) + geom_histogram(data =triple_lap, aes(year, av_time))
ggplot() + geom_bar(data = records, aes(year, av_time), stat = "Identity", alpha = 0.5) +
geom_histogram(data = single_lap, aes(year, av_time)) + geom_histogram(data =triple_lap, aes(year, av_time))
#Added a new variable "year" through mutate
records <- mutate(records, year = substr(date, 1, 4))
#Summarized the data and put it into a variable for question 7
av_time_year <- summarise(year_group, av_time = mean(time))
#Printed variable
av_time_year
#Summarized the data set to find the average time for each track
mean_records <- summarize(track_group, av_time = mean(time, na.rm = TRUE))
#Printed result
mean_records
#Made a slightly new data set grouping records by track so that summarize can do its thing properly
track_group <- group_by(records, track)
#Summarized the data set to find the average time for each track
mean_records <- summarize(track_group, av_time = mean(time, na.rm = TRUE))
#Printed result
mean_records
#Found the smallest one using a simple filter function, it's Mario Raceway
filter(mean_records, av_time == min(av_time))
#Printed result
mean_records
?dist
Cluster_Ex<-read.csv("D:/Dickinson College Teaching/DATA 180/data/Cluster_Ex.csv") #"Path where your data is goes here"
ls(Cluster_Ex)
head(Cluster_Ex)
Cluster_Ex<-read.csv("D:/Dickinson College Teaching/DATA 180/data/Cluster_Ex.csv") #"Path where your data is goes here"
Cluster_Ex<-read.csv("/Users/benjaminfox/Desktop/Data-180-Ben-Fox/Cluster_Ex.csv") #"Path where your data is goes here"
ls(Cluster_Ex)
head(Cluster_Ex)
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4), ylim=c(0,4),cex=1.3,cex.axis=1.3,pch=16)
#Euclidean Distance, cluster method = complete
Cluster_Ex_HC<-hclust(dist(Cluster_Ex))
Cluster_Ex_HC
plot(Cluster_Ex_HC,cex=.75,xlab="")
#Manhattan Distance, method = single
Cluster_Ex_HC<-hclust(dist(Cluster_Ex,method="manhattan"),method="single")
Cluster_Ex_HC
plot(Cluster_Ex_HC,cex=.75,xlab="")
#Find clusters in the data
Cluster_Ex_HC<-hclust(dist(Cluster_Ex))
cutree(Cluster_Ex_HC,k=3) #Used with hclust to group the tree into clusters, only expecting a list of merge, height, and labels
# Find different number of clusters within the data
Cluster_Ex<-data.frame(Cluster_Ex,cutree(Cluster_Ex_HC,k=c(3,4,5)))
names(Cluster_Ex)
names(Cluster_Ex)<-c("X","X1","X2","k_3","k_4","k_5")
head(Cluster_Ex)
Cluster_Ex<-read.csv("/Users/benjaminfox/Desktop/Data-180-Ben-Fox/Cluster_Ex_clusters.csv")
#plot the clusters
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3,cex.lab=1.2,cex=1.2,pch=15+k_3,col=k_3)
plot(Cluster_Ex_HC,cex=1.25,xlab="")
dist(X)
X <- matrix(c(-1,-2,4,2,0,0,-2,2,2,-1,-1,3,3,0,0,2,2,-3,1,1),nrow=5,byrow = T)
print(X)
dist(X)
dist(X, method = "manhattan")
dist(X, method = "minkowski", p = 3)
library(MASS)
library(dplyr)
library(MASS)
library(dplyr)
head(Cars93)
Cars93
#Getting Vans93 dataset
Vans93 <- Cars93 %>% filter(Type == "Van") %>% select(Model, Price, EngineSize, Horsepower, MPG.highway, Length)
#Print Vans93
Vans93
#Creating base Vans_Euclidean matrix
Vans_Euclidean <- dist(as.matrix(Vans93[,-1]))
Vans_Euclidean
#Naming each object in the dataframe
colnames(Vans_Euclidean)<-Vans93[,1]
rownames(Vans_Euclidean)<-Vans93[,1]
#Naming each object in the dataframe
colnames(Vans_Euclidean)<-Vans93[,1]
#Naming each object in the dataframe
colnames(Vans_Euclidean)<-Vans93[,1]
#Creating base Vans_Euclidean matrix
Vans_Euclidean <- dist(as.matrix(Vans93[,-1], colnames(Vans_Euclidean)<-Vans93[,1], rownames(Vans_Euclidean)<-Vans93[,1]))
Vans_Euclidean
#Creating base Vans_Euclidean matrix
Vans_Euclidean <- dist(as.matrix(Vans93[,-1]))
Vans_Euclidean
#
colnames(Vans_Euclidean) <- Vans93[,1]
#
colnames(Vans_Euclidean) <- Vans93(c(Lumina_APV, Astro, Caravan, Aerostar, MPV, Quest, Silhouette, Previa, Eurovan)
#Setting the names of the objects
colnames(Vans_Euclidean) <- Vans93(c(Lumina_APV, Astro, Caravan, Aerostar, MPV, Quest, Silhouette, Previa, Eurovan)
#Setting the names of the objects
colnames(Vans_Euclidean) <- Vans93(c(Lumina_APV, Astro, Caravan, Aerostar, MPV, Quest, Silhouette, Previa, Eurovan)
#Setting the names of the objects
colnames(Vans_Euclidean) <- Vans93(c(Lumina_APV, Astro, Caravan, Aerostar, MPV, Quest, Silhouette, Previa, Eurovan))
#Setting the names of the objects
colnames(Vans_Euclidean) <- Vans93(c(Lumina_APV, Astro, Caravan, Aerostar, MPV, Quest, Silhouette, Previa, Eurovan))
#Print Vans93
Vans93
#Print Vans93
Vans93
#Setting the names of the objects
colnames(Vans_Euclidean) <- Vans93(Model)
#Setting the names of the objects
colnames(Vans_Euclidean) <- Vans93$Model
#Setting the names of the objects
colnames(Vans_Euclidean.df) <- Vans93$Model
#Making Vans_Euclidean into a data frame so R stops throwing fits
Vans_Euclidean <- as.data.frame(Vans_Euclidean)
#Setting the names of the objects
colnames(Vans_Euclidean) <- Vans93$Model
#Creating base Vans_Euclidean matrix
Vans_Euclidean <- dist(as.matrix(Vans93[,-1]))
#Setting the names of the objects
colnames(Vans_Euclidean) <- Vans93$Model
Vans_Euclidean
#Making Vans_Euclidean into a data frame so R stops throwing fits
Vans_Euclidean <- as.data.frame(Vans_Euclidean)
Vans_Euclidean
#Creating base Vans_Euclidean matrix
Vans_Euclidean <- dist(as.matrix(Vans93[,-1]))
#Setting the names of the objects
colnames(Vans_Euclidean)<-Vans93[,1]
colnames(Vans_Euclidean)<-Vans93[,1]
D <- matrix(c(0,1,9,2,1.6,8,1,0,3,6,9,4,9,3,0,5,10,3,2,6,5,0,2,7.5,1.6,9,10,2,0,5.5,8,4,3,7.5,5.5,0),nrow=6,byrow = T)
print(D)
#Creating base Vans_Euclidean matrix
Vans_Euclidean <- dist(as.matrix(Vans93[,-1]))
#Setting the names of the objects
colnames(Vans_Euclidean)<-Vans93[,1]
Vans_Euclidean
# get total count for each word
wordCounts <- rowSums(m)
setwd("/Users/benjaminfox/Desktop/Data-180-Ben-Fox") # Set this to your local GitHub repository.
library(tm) # text mining package
detach("package:NLP", unload = TRUE)
library(NLP)
library(tm) # text mining package
# Instead of that, just read in the speech
charVector <- scan("speech.txt", character(0), sep = "\n") # "\n is a line separator
head(charVector)
charVector_block <- scan("speech.txt", character(0))
charVector_block # default separator for the scan function is space.
posWords <- scan("positive-words.txt", character(0), sep = "\n")  # 2006 items
negWords <- scan("negative-words.txt", character(0), sep = "\n")  # 4783 items
head(posWords,15)
head(negWords,15)
# first step transformation: make all of the letters in "wordCorpus" lowercase
wordCorpus <- tm_map(wordCorpus, content_transformer(tolower))
# cleaning part!!
wordVector <- VectorSource(charVector) # from tm package, convert to vector
class(wordVector); typeof(wordVector); length(wordVector)
wordCorpus <- Corpus(wordVector) # convert to corpus
class(wordCorpus); typeof(wordCorpus); length(wordCorpus)
# first step transformation: make all of the letters in "wordCorpus" lowercase
wordCorpus <- tm_map(wordCorpus, content_transformer(tolower))
# second step transformation: remove the punctuation in "wordCorpus"
wordCorpus <- tm_map(wordCorpus, removePunctuation)
# third step transformation: remove numbers in "wordCorpus"
wordCorpus <- tm_map(wordCorpus, removeNumbers)
# final step transformation: take out the "stop" words, such as "the", "a" and "at"
wordCorpus <- tm_map(wordCorpus, removeWords, stopwords("english"))
stop_words<-stopwords("english")
stop_words
stopwords("japanese")
?stopwords
stopwords("spanish")
stopwords("russian")
stopwords("japanese")
stopwords("korean")
stopwords("chinese")
stopwords("mandarin")
wordCorpus[["1"]][["content"]] # Review what's left of the first paragraph
# create a term-document matrix "tdm"
tdm <- TermDocumentMatrix(wordCorpus)
# view term-document matrix "tdm"
tdm
