print("Big boy")
install.packages("randomForest") #This allows me to access the functions and data within this script
install.packages("MASS")
library("MASS")
head(Cars93)
?Cars93
ls(Cars93) #Tells you the column names of all the variables in the data
Cars93$Type #Find the categorizations of each column
#We can use the table function to find various things by writing table(dataset$variable)
table(Cars93$AirBags)
table(Cars93$Manufacturer)
#We'll use round plus division in tables to find relative frequency distribution
round(table(Cars93$AirBags)/nrow(Cars93),3)
#colors
colors()
#This list can be sliced by saying I want [first:last]
colors()[1:40]
palette()
palette()
palette()
#We can change the palette like so
palette(c("red2","orchid1","yellow4","tomato2"))
palette()
head(Cars93) #Shows the first six rows of the given data set
install.packages("randomForest") #This allows me to access the functions and data within this script
install.packages("MASS")
library("MASS")
head(Cars93) #Shows the first six rows of the given data set
library("MASS")
#Making a stem plot
Cars93$Weight
stem(Cars93$Weight)
#Dot plot of MPG
Cars93$MPG.city
stripchart(Cars93$MPG.city,method="stack",pch=16, + cex.axis=1.2,cex.lab=1.2,xlab="Miles per Gallon")
stripchart(Cars93$MPG.city,method="stack",pch=16, cex.axis=1.2,cex.lab=1.2,xlab="Miles per Gallon")
stripchart(Cars93$MPG.city,method="stack",pch=3, cex.axis=1.2,cex.lab=1.2,xlab="Miles per Gallon")
stripchart(Cars93$MPG.city,method="stack",pch=18, cex.axis=1.2,cex.lab=1.2,xlab="Miles per Gallon")
stripchart(Cars93$MPG.city,method="stack",pch=1, cex.axis=1.2,cex.lab=1.2,xlab="Miles per Gallon")
stripchart(Cars93$MPG.city,method="stack",pch=16, cex.axis=1.0,cex.lab=1.2,xlab="Miles per Gallon")
stripchart(Cars93$MPG.city,method="stack",pch=16, cex.axis=1.2,cex.lab=1.2,xlab="Miles per Gallon")
stripchart(Cars93$MPG.city,method="stack",pch=16, cex.axis=2.0,cex.lab=1.2,xlab="Miles per Gallon")
stripchart(Cars93$MPG.city,method="stack",pch=16, cex.axis=1.2,cex.lab=2.0,xlab="Miles per Gallon")
#Histogram of Weight
Cars93$Weight
hist(Cars93$Weight, cex.lab=1.2, cex.axis=1.2, col="lightgray", breaks=seq(1000, 5000, 300), xlab="Weight of Cars")
hist(Cars93$Weight, cex.lab=1.2, cex.axis=1.2, col="lightgray", breaks=seq(1000, 5000, 500), xlab="Weight of Cars")
print("ha ha i too use words")
1+1
2*pi*r
# A function that returns the circumference of a circle given its radius
circumference <- function(r){
2*pi*r
}
print(circumference(2))
print(circumference(6))
# A function that sums two numbers
sum_two_nums <- function(x, y) {x + y}
print(sum_two_nums(3,4))
print(sum_two_nums(1256,879))
mean_median <- function(vector){
mean <- mean(vector)
median <- median(vector)
return(c(mean, median))
}
mean_median
# Install library
install.packages("readxl")
#Call library
library("readxl")
library("MASS")
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("/Users/benjaminfox/Desktop/Data-180-Ben-Fox")
read_excel("particulate data.xlsx") # Always keep in mind file extensions excel = .xlsx or .xls, Comma separated value = .csv
#2.
# READ DIRECTLY FROM THE FOLDER
p_data<-read_excel("/Users/benjaminfox/Desktop/Data-180-Ben-Fox/particulate data.xlsx")
#3. Read CSV
p_data_csv = read.csv("/Users/benjaminfox/Desktop/Data-180-Ben-Fox/particulate data.csv")
my_data<-data.frame(
col_1 = c("A","B","C","D", "E"),
col_2 = c(1,2,3,4,5),
col_3 = c(1,12,3,4,5.4)
)
my_data
nrow(my_data)
# Create a vector of numbers
vec<-1:10
vec
stem(p_data$particulate_rounded_off)
stripchart(Cars93$MPG.city,method="stack",pch=16,cex.axis=1.2,cex.lab=1.2,xlab = "Miles per Gallon")
library(bslib)
detach("package:bslib", unload = TRUE)
library(MASS)
library(dplyr)
library(tidyverse)
library(tibble)
library(MASS)
library(dplyr)
library(tidyverse)
library(tibble)
### Data Wrangling.
ls(Cars93)
Cars93_Ex1<-select(Cars93,Type,EngineSize,DriveTrain,MPG.city)
head(Cars93_Ex1)
table(Cars93$Type)
Cars93_Ex2<-filter(Cars93, Type=="Small")
head(Cars93_Ex2)
Cars93_Ex3<-select(filter(Cars93, Type=="Small"),Model,EngineSize,Horsepower,MPG.highway)
head(Cars93_Ex3)
Cars93_Ex1<-select(Cars93,Type,EngineSize,DriveTrain,MPG.city)
head(Cars93_Ex1)
Cars93_Ex2<-filter(Cars93, Type=="Small")
head(Cars93_Ex2)
Cars93_Ex3<-select(filter(Cars93, Type=="Small"),Model,EngineSize,Horsepower,MPG.highway)
head(Cars93_Ex3)
Cars93_Ex4<-select(filter(Cars93, Horsepower>150),Model,EngineSize,Horsepower,MPG.highway)
head(Cars93_Ex4)
Cars93_Ex4<-select(filter(Cars93, Horsepower>150),Model,EngineSize,Horsepower,MPG.highway)
head(Cars93_Ex4)
Cars93_Ex7<-select(filter(Cars93, Type %in% c("Sporty","Compact") & Horsepower >=120),Model,Type,EngineSize,Cylinders,Horsepower,MPG.highway)
Cars93_Ex7<-select(filter(Cars93, Type %in% c("Sporty","Compact") & Horsepower >=120),
Model,Type,EngineSize,Cylinders,Horsepower,MPG.highway)
head(Cars93_Ex7)
# Mutate function. Allows you to create a new variable to observe by having you do arithmetic with two other variables
Cars93_Ex9<-select(mutate(Cars93,HPpLiter=Horsepower/EngineSize),Model,Type,EngineSize,Cylinders,Horsepower,MPG.highway,HPpLiter)
# Equivalent pipeline
Cars93_Ex9<-Cars93 %>%mutate(HPpLiter=Horsepower/EngineSize) %>%select(Model,Type,EngineSize,Cylinders,Horsepower,MPG.highway,HPpLiter)
head(Cars93_Ex9)
table(Cars93$Type)
#Using the arrange function to sort your dataframe
Cars93_Ex10<-arrange(Cars93_Ex9,Cylinders,desc(Horsepower))
head(Cars93_Ex10)
#Rename function
Cars93_Ex11<-rename(Cars93_Ex10,HP=Horsepower,MPG_Highway=MPG.highway)
head(Cars93_Ex11)
#Using more of the mutate function.
Cars93_Ex12<-mutate(Cars93_Ex11,HPpLiter=round(HPpLiter,1))
head(Cars93_Ex12)
#Using more of the mutate function. The round function being used below marks the value being rounded and then the 1 rounds the function to the desired decimal place.
Cars93_Ex12<-mutate(Cars93_Ex11,HPpLiter=round(HPpLiter,0))
head(Cars93_Ex12)
#Using more of the mutate function. The round function being used below marks the value being rounded and then the number rounds the function to the desired decimal place.
Cars93_Ex12<-mutate(Cars93_Ex11,HPpLiter=round(HPpLiter,3))
head(Cars93_Ex12)
#Using more of the mutate function. The round function being used below marks the value being rounded and then the number rounds the function to the desired decimal place.
Cars93_Ex12<-mutate(Cars93_Ex11,HPpLiter=round(HPpLiter,1))
head(Cars93_Ex12)
#Using the arrange function to sort your dataframe. In the order of the first value, with the value in desc() being used for tie breakers. Run the function to understand
Cars93_Ex10<-arrange(Cars93_Ex9,Cylinders,Horsepower)
head(Cars93_Ex10)
#Using the arrange function to sort your dataframe. In the order of the first value, with the value in desc() being used for tie breakers. Run the function to understand
Cars93_Ex10<-arrange(Cars93_Ex9,Cylinders,desc(Horsepower))
head(Cars93_Ex10)
Cars93_Ex13<-mutate(Cars93_Ex12,Performance=ifelse(HPpLiter>=65,"High","Regular"))
head(Cars93_Ex13)
Cars93_Ex14<-Cars93_Ex13 %>%mutate(Performance=ifelse(HPpLiter>=65,"High",ifelse(HPpLiter>=55,"Regular","Low")))
head(Cars93_Ex14)
### Using mammals data from the MASS library
head(mammals)
has_rownames(mammals)
mammals_rn<-rownames_to_column(mammals, "Mammal")
has_rownames(mammals_rn)
head(mammals_rn)
head(mammals_rn, 5)
mammals_2<-column_to_rownames(mammals_rn,"Mammal")
head(mammals_2, 5)
#Summarize function
Engine_Summary<-Cars93_Ex14 %>%group_by(Type) %>%summarize(Num=n(),Min_Size=min(EngineSize),Max_Size=max(EngineSize),Ave_HP=mean(HP),
Median_MPG_HWY=median(MPG_Highway),Num_High_Performance=sum(Performance=="High"))
Engine_Summary<-data.frame(Engine_Summary)
Engine_Summary
Engine_Summary_2<-Cars93_Ex14 %>%group_by(Cylinders) %>%
summarise(Num=n(),Min_Size=min(EngineSize),Max_Size=max(EngineSize),Ave_HP=mean(HP),
Median_MPG_HWY=median(MPG_Highway),Num_High_Performance=sum(Performance=="High"))
Engine_Summary_2<-data.frame(Engine_Summary_2)
Engine_Summary_2
Cluster_Ex<-read.csv("/Users/benjaminfox/Desktop/Data-180-Ben-Fox/Cluster_Ex.csv") #"Path where your data is goes here"
ls(Cluster_Ex)
head(Cluster_Ex)
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4), ylim=c(0,4),cex=1.3,cex.axis=1.3,pch=16)
#Euclidean Distance, cluster method = complete
Cluster_Ex_HC<-hclust(dist(Cluster_Ex))
Euclidean Distance, cluster method = complete
#Euclidean Distance, cluster method = complete
Cluster_Ex_HC<-hclust(dist(Cluster_Ex))
Cluster_Ex_HC
plot(Cluster_Ex_HC,cex=.75,xlab="")
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4), ylim=c(0,4),cex=1.3,cex.axis=1.3,pch=16)
ls(Cluster_Ex)
head(Cluster_Ex)
Cluster_Ex
head(Cluster_Ex)
dist(Cluster_Ex)
#Euclidean Distance, cluster method = complete
Cluster_Ex_HC<-hclust(dist(Cluster_Ex))
Cluster_Ex_HC
plot(Cluster_Ex_HC,cex=.75,xlab="")
#Euclidean Distance, cluster method = complete
Cluster_Ex_HC<-hclust(dist(Cluster_Ex))
Cluster_Ex_HC
#The hclust function helps return the dendrogram, the method within it
?hclust
#Find clusters in the data
Cluster_Ex_HC<-hclust(dist(Cluster_Ex))
cutree(Cluster_Ex_HC,k=3)
# Find different number of clusters within the data
Cluster_Ex<-data.frame(Cluster_Ex,cutree(Cluster_Ex_HC,k=c(3,4,5)))
names(Cluster_Ex)
names(Cluster_Ex)<-c("X","X1","X2","k_3","k_4","k_5")
head(Cluster_Ex)
?cutree
Cluster_Ex<-read.csv("/Users/benjaminfox/Desktop/Data-180-Ben-Fox/Cluster_Ex_clusters.csv")
#plot the clusters
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3,cex.lab=1.2,cex=1.2,pch=15+k_3,col=k_3)
plot(Cluster_Ex_HC,cex=1.25,xlab="")
#plot the clusters
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3,cex.lab=1.2,cex=1.2,pch=15+k_3,col=k_3)
Cluster_Ex[c(12,30),]
plot(Cluster_Ex_HC,cex=1.25,xlab="")
Cluster_Ex[c(12,30),]
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex=1.4,cex.lab=1.2,pch=14+k_4,col=k_4)
Cluster_Ex_HC<-identify(Cluster_Ex)
Cluster_Ex<-read.csv("/Users/benjaminfox/Desktop/Data-180-Ben-Fox/Cluster_Ex.csv") #"Path where your data is goes here"
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4), ylim=c(0,4),cex=1.3,cex.axis=1.3,pch=16)
#Euclidean Distance, cluster method = complete
Cluster_Ex_HC<-hclust(dist(Cluster_Ex))
Cluster_Ex_HC
plot(Cluster_Ex_HC,cex=.75,xlab="")
#Manhattan Distance, method = single
Cluster_Ex_HC<-hclust(dist(Cluster_Ex,method="manhattan"),method="single")
Cluster_Ex_HC
plot(Cluster_Ex_HC,cex=.75,xlab="")
#Find clusters in the data
Cluster_Ex_HC<-hclust(dist(Cluster_Ex))
cutree(Cluster_Ex_HC,k=3) #Used with hclust to group the tree into clusters, only expecting a list of merge, height, and labels
# Find different number of clusters within the data
Cluster_Ex<-data.frame(Cluster_Ex,cutree(Cluster_Ex_HC,k=c(3,4,5)))
names(Cluster_Ex)
names(Cluster_Ex)<-c("X","X1","X2","k_3","k_4","k_5")
head(Cluster_Ex)
Cluster_Ex<-read.csv("/Users/benjaminfox/Desktop/Data-180-Ben-Fox/Cluster_Ex_clusters.csv")
#plot the clusters
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3,cex.lab=1.2,cex=1.2,pch=15+k_3,col=k_3)
plot(Cluster_Ex_HC,cex=1.25,xlab="")
Cluster_Ex[c(12,30),]
Test<- matrix(sample(1:20,12, replace = T), nrow=3, byrow = T)
Test # This matrix will be different every time you run the line 3.
Test<- matrix(sample(1:20,12, replace = T), nrow=3, byrow = T)
Test # This matrix will be different every time you run the line 3.
apply(Test,1,mean)
apply(Test,2,mean)
apply(Test,1,mean)
Test<- matrix(sample(1:20,12, replace = T), nrow=3, byrow = T)
Test # This matrix will be different every time you run the line 3.
apply(Test,1,mean)
#apply(dataset/matrix, margin(rows/columns or both), mean/sd/sum)
apply(Test,1,mean)
apply(Test,2,mean)
apply(Test,2,sd)
apply(Test,2,sum)
apply(Test,1,sum)
apply(Test,2,sort, decreasing = T)
v1<-c(2,6,4,1)
v2<-c(21,34,55,11)
v3<-c(75,50,100,80)
Data_M<-data.frame(v1,v2,v3)
Data_M
apply(Test,2,sort, decreasing = T)
Data_M
apply(Data_M,2,mean)
?apply
Data_M_scaled<-scale(Data_M)
Data_M_scaled
#Gives us a z-score table
Data_M_scaled
apply(Data_M,2,sd)
apply(Data_M, 2, mean)
apply(Data_M,2,sd)
rng<-apply(Data_M,2,max)-apply(Data_M,2,min)
rng
scale(Data_M, center = F, scale=rng)
library(planets)
install.packages("planets")
#install.packages("planets")
library(planets)
head(planets)
head(planets_tr)
library(ggplot2)
ggplot(data = planets, aes(mass)) + geom_bar()
ggplot(data = planets) + geom_bar(aes(mass))
ggplot(data = planets) + geom_bar()
ggplot(data = planets, aes(planets$`Mass (MJ)`)) + geom_bar()
ggplot(data = planets, aes(`Mass (MJ)`)) + geom_bar()
ggplot(data = planets, aes(`Name`,Mass (MJ)`)) + geom_bar()
ggplot(data = planets, aes(`Name`, `Mass (MJ)`)) + geom_bar()
Cluster_Ex<-read.csv("/Users/benjaminfox/Desktop/Data-180-Ben-Fox/Cluster_Ex(11_6).csv") # The path to your data goes here.
head(Cluster_Ex)
Kmeans_3<-kmeans(Cluster_Ex,centers=3)
#Centers.
Kmeans_3$centers
?kmeans
Kmeans_3
#Centers.
Kmeans_3$centers
#Within Group Sum of Squares.
Kmeans_3$withinss
#Clusters.
Kmeans_3$cluster
# Plotting clusters.
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex.lab=1.2,cex=1.2,pch=15+Kmeans_3$cluster,col=Kmeans_3$cluster)
Cluster_Ex
#Assigns the K-Means Clustering to a variable, giving it three clusters.
Kmeans_3<-kmeans(Cluster_Ex,centers=3)
Kmeans_3
#Centers.
Kmeans_3$centers
#Within Group Sum of Squares.
Kmeans_3$withinss
Cluster_Ex<-read.csv("/Users/benjaminfox/Desktop/Data-180-Ben-Fox/Cluster_Ex(10_26).csv") # The path to your data goes here.
head(Cluster_Ex)
#Assigns the K-Means Clustering to a variable, giving it three clusters.
Kmeans_3<-kmeans(Cluster_Ex,centers=3)
Cluster_Ex<-read.csv("/Users/benjaminfox/Desktop/Data-180-Ben-Fox/Cluster_Ex(10_26).csv") # The path to your data goes here.
head(Cluster_Ex)
#Assigns the K-Means Clustering to a variable, giving it three clusters.
Kmeans_3<-kmeans(Cluster_Ex,centers=3)
Kmeans_3
#Assigns the K-Means Clustering to a variable, giving it three clusters.
Kmeans_3<-kmeans(Cluster_Ex,centers=3)
Cluster_Ex<-read.csv("/Users/benjaminfox/Desktop/Data-180-Ben-Fox/Cluster_Ex(11_3).csv") # The path to your data goes here.
head(Cluster_Ex)
Cluster_Ex<-read.csv("/Users/benjaminfox/Desktop/Data-180-Ben-Fox/Cluster_Ex(11_6).csv") # The path to your data goes here.
head(Cluster_Ex)
#Assigns the K-Means Clustering to a variable, giving it three clusters.
Kmeans_3<-kmeans(Cluster_Ex,centers=3)
Kmeans_3
#Centers.
Kmeans_3$centers
#Within Group Sum of Squares.
Kmeans_3$withinss
#Clusters.
Kmeans_3$cluster
# Plotting clusters.
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex.lab=1.2,cex=1.2,pch=15+Kmeans_3$cluster,col=Kmeans_3$cluster)
#Adding centroids.
points(X2~X1,data=Kmeans_3$centers,pch=10,cex=1.8,col="blue")
palette()
Kmeans_5_1<-kmeans(Cluster_Ex,centers=5)
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex.lab=1.2,cex=1.2,pch=15+Kmeans_5_1$cluster,col=Kmeans_5_1$cluster)
Kmeans_5_2<-kmeans(Cluster_Ex,centers=5)
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex.lab=1.2,cex=1.2,pch=15+Kmeans_5_2$cluster,col=Kmeans_5_2$cluster)
Kmeans_5_1<-kmeans(Cluster_Ex,centers=5)
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex.lab=1.2,cex=1.2,pch=15+Kmeans_5_1$cluster,col=Kmeans_5_1$cluster)
Kmeans_5_2<-kmeans(Cluster_Ex,centers=5)
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex.lab=1.2,cex=1.2,pch=15+Kmeans_5_2$cluster,col=Kmeans_5_2$cluster)
#using set seed for reproducibility.
Kmeans_5_3<-kmeans(Cluster_Ex,centers=Cluster_Ex[c(2,5,7,21,36),])
set.seed(5)
Kmeans_5_4<-kmeans(Cluster_Ex,centers=5)
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex.lab=1.2,cex=1.2,pch=15+Kmeans_5_4$cluster,col=Kmeans_5_4$cluster)
# Clustering with 3 clusters, nstart = 1. Randomize only once.
Cluster3_S1<-kmeans(Cluster_Ex,centers=3)
Cluster3_S50<-kmeans(Cluster_Ex,centers=3,nstart=50)
Cluster3_S1
Cluster3_S1$withinss
Cluster3_S1$tot.withinss
